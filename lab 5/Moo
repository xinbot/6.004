.include beta.uasm
.include lab5checkoff.uasm	| include instruction macros and test jig

count_bull_cows: 	| your subroutine must have this name
	PUSH(LP) 	| standard subroutine entry sequence
	PUSH(BP)
	MOVE(SP, BP)
	PUSH(R1)
	PUSH(R2)
	PUSH(R3) 
	PUSH(R4) 
	PUSH(R5) 
	PUSH(R6) 
	PUSH(R7)
	PUSH(R8)
	PUSH(R9) 
	PUSH(R10)
	PUSH(R11) 

	LD(BP,-12,R2)		| init arg a
	LD(BP,-16,R3)		| init arg b
	CMOVE(0,R4)	| bulls = 0
	CMOVE(0,R5)	| cows = 0
	CMOVE(0xF,R11)	| mask = 0xF
	CMOVE(0,R6)	| i = 0
	
	BR(endfor_bulls)
for_bulls:
	ADDC(R6,1,R6)	| i = i + 1
	AND(R2,R11,R0)	| a & mask
	AND(R3,R11,R1)	| b & mask
	CMPEQ(R0,R1,R1)	| (a & mask) == (b & mask) ? 1 : 0
	BEQ(R1,endif_bulls)	| R1 == 0 ? endif_bulls : PC+4
	ADDC(R4,1,R4)	| bulls = bulls + 1 
	OR(R2,R11,R2)	| a = a or mask
	OR(R3,R11,R3)	| b = b or mask

endif_bulls:
	SHLC(R11,4,R11) | mask = mask << 4
	
endfor_bulls:
	CMPLTC(R6,4,R1)	| i < 4 ? 1 : 0
	BNE(R1,for_bulls)	| R1 != 0 ? for_bulls : PC+4
	
	CMOVE(0,R6)	| i = 0
	BR(endfor_cows)
for_cows:
	ADDC(R6,1,R6)		| i = i + 1
	ANDC(R2,0xF,R9)	| atry = a & 0xF
	SHRC(R2,4,R2)	| a = a >> 4
	CMPEQC(R9,0xF,R1)	| atry == 0xF ? 1 : 0
	BNE(R1,endfor_cows)	| r1 != 0 ? endif_cows : PC+4
	MOVE(R3,R8) 	| btemp = b 
	CMOVE(0xF,R11)	| mask = 0xF
	
	CMOVE(0,R7)	| j = 0
	BR(endfor_inner_cows)
for_inner_cows:
	ADDC(R7,1,R7)	| j = j + 1
	ANDC(R8,0xF,R10)| btry = btemp & 0xF
	SHRC(R8,4,R8)	| btemp = btemp >> 4
	CMPEQ(R9,R10,R1)	| btry == atry ? 1 : 0
	BEQ(R1,endif_inner_cows)	| R1 == 0 ? endif_inner_cows : PC+4
	ADDC(R5,1,R5)	| cows = cows + 1
	OR(R3,R11,R3) 	| b = b or mask
	BR(endfor_cows) | break
	
endif_inner_cows:
	SHLC(R11,4,R11)	| mask = mask << 4
	
endfor_inner_cows:
	CMPLTC(R7,4,R1)	| j < 4 ? 1 : 0 
	BNE(R1,for_inner_cows)	| R1 != 0 ? for_inner_cows : PC+4
endfor_cows:
	CMPLTC(R6,4,R1)	| i < 4 ? 1 : 0
	BNE(R1,for_cows)	| R1 != 0 ? for_cows : PC+4
return:
	SHLC(R4,4,R1)	| bulls << 4
	ADD(R1,R5,R0)	| bulls + cows
	
	POP(R11)
	POP(R10) 
	POP(R9) 
	POP(R8) 
	POP(R7) 
	POP(R6) 
	POP(R5)
	POP(R4)
	POP(R3)
	POP(R2)
	POP(R1)
	MOVE(BP,SP) 	| standard subroutine exit sequence
	POP(BP)
	POP(LP)
	RTN()
StackBase:
	LONG(.+4) | Pointer to bottom of stack
	. = .+0x1000 | Reserve space for stack...